jQuery(document).ready(function($) {
    /***************** parallax resize ******************/
    jQuery(window).trigger('resize').trigger('scroll');

    /***************** Header ******************/
    $(function() {
        //caches a jQuery object containing the header element
        var header = $(".clearHeader");
        $(window).scroll(function() {
            var scroll = $(window).scrollTop();

            if (scroll >= 150) {
                header.removeClass('clearHeader').addClass("darkHeader");
            } else {
                header.removeClass("darkHeader").addClass('clearHeader');
            }
        });
    });
    /***************** Main Menu ******************/
    jQuery(document).ready(function($) {
        //if you change this breakpoint in the style.css file (or _layout.scss if you use SASS), don't forget to update this value as well
        var MqL = 1150;
        //move nav element position according to window width
        moveNavigation();
        $(window).on('resize', function() {
            (!window.requestAnimationFrame) ? setTimeout(moveNavigation, 300): window.requestAnimationFrame(moveNavigation);
        });

        //mobile - open lateral menu clicking on the menu icon
        $('.cd-nav-trigger').on('click', function(event) {
            event.preventDefault();
            if ($('.cd-main-content,.parallax-mirror,.cd-secondary-nav,#wrap').hasClass('nav-is-visible')) {
                closeNav();
                $('.cd-overlay').removeClass('is-visible');
            } else {
                $(this).addClass('nav-is-visible');
                $('.cd-primary-nav').addClass('nav-is-visible');
                $('.main-header-wrapper').addClass('nav-is-visible');
                $('.cd-main-content, .parallax-mirror,.cd-secondary-nav,#wrap').addClass('nav-is-visible').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
                    $('body').addClass('overflow-hidden');
                });
                toggleSearch('close');
                $('.cd-overlay').addClass('is-visible');
                $('.mega-nav-title>a').addClass('mega-nav-mobile-title');
				$('.mega-nav-image').remove();
				$('.mega-nav-heading').remove();
            }
        });

        //open search form
        $('.cd-search-trigger').on('click', function(event) {
            event.preventDefault();
            toggleSearch();
            closeNav();
        });
        // $(window).scroll(function() {
        //     closeNav();
        //     $('.cd-search').removeClass('is-visible');
        //     $('.cd-search-trigger').removeClass('search-is-visible');
        //     $('.cd-overlay').removeClass('search-is-visible');
        // });
        //close lateral menu on mobile 
        $('.cd-overlay').on('swiperight', function() {
            if ($('.cd-primary-nav').hasClass('nav-is-visible')) {
                closeNav();
                $('.cd-overlay').removeClass('is-visible');
            }
        });
        $('.nav-on-left .cd-overlay').on('swipeleft', function() {
            if ($('.cd-primary-nav').hasClass('nav-is-visible')) {
                closeNav();
                $('.cd-overlay').removeClass('is-visible');
            }
        });
        $('.cd-overlay, .cd-main-content').on('click', function() {
            closeNav();
            toggleSearch('close')
            $('.cd-overlay').removeClass('is-visible');
        });

        // $('.cd-main-content, .parallax-mirror,.cd-secondary-nav,#wrap').on('click', function() {
        //     closeNav();
        // });


        //prevent default clicking on direct children of .cd-primary-nav 
        $('.cd-primary-nav').children('.has-children').children('a').on('click', function(event) {
            event.preventDefault();
        });

        //open submenu - on click
        $('.has-children').children('a').on('click', function(event) {
            if (!checkWindowWidth()) event.preventDefault();
            var selected = $(this);
            if (selected.next('ul').hasClass('is-hidden')) {
                //desktop version only
                selected.addClass('selected').next('ul').removeClass('is-hidden').end().parent('.has-children').parent('ul').addClass('moves-out');
                selected.parent('.has-children').siblings('.has-children').children('ul').addClass('is-hidden').end().children('a').removeClass('selected');
                $('.cd-overlay').removeClass('is-visible');
            } else {
                selected.removeClass('selected').next('ul').addClass('is-hidden').end().parent('.has-children').parent('ul').removeClass('moves-out');
                $('.cd-overlay').removeClass('is-visible');
            }
            toggleSearch('close');
        });

        //submenu items - go back link
        $('.go-back').on('click', function() {
            $(this).parent('ul').addClass('is-hidden').parent('.has-children').parent('ul').removeClass('moves-out');
        });

        function closeNav() {
            $('.cd-nav-trigger').removeClass('nav-is-visible');
            $('.main-header-wrapper').removeClass('nav-is-visible');
            $('.cd-primary-nav').removeClass('nav-is-visible');
            $('.has-children ul').addClass('is-hidden');
            $('.has-children a').removeClass('selected');
            $('.moves-out').removeClass('moves-out');
            $('.cd-main-content,.parallax-mirror,.cd-secondary-nav,#wrap').removeClass('nav-is-visible').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
                $('body').removeClass('overflow-hidden');
            });
        }

        function toggleSearch(type) {
            if (type == "close") {
                //close serach 
                $('.cd-search').removeClass('is-visible');
                $('.cd-search-trigger').removeClass('search-is-visible');
                $('.cd-overlay').removeClass('search-is-visible');

            } else {
                //toggle search visibility
                $('.cd-search').toggleClass('is-visible');
                $('.cd-search-trigger').toggleClass('search-is-visible');
                $('.cd-overlay').toggleClass('search-is-visible');
                if ($(window).width() > MqL && $('.cd-search').hasClass('is-visible')) $('.cd-search').find('input[type="search"]').focus();
                ($('.cd-search').hasClass('is-visible')) ? $('.cd-overlay').addClass('is-visible'): $('.cd-overlay').removeClass('is-visible');
            }
        }

        function checkWindowWidth() {
            //check window width (scrollbar included)
            var e = window,
                a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }
            if (e[a + 'Width'] >= MqL) {
                return true;
            } else {
                return false;
            }
        }

        function moveNavigation() {
            var navigation = $('.cd-nav');
            var desktop = checkWindowWidth();
            if (desktop) {
                navigation.detach();
                navigation.insertBefore('.cd-header-buttons');
            } else {
                navigation.detach();
                navigation.insertAfter('.cd-main-content');
            }
        }
    });



    /***************** tooltip ******************/
    $(function() {
        $('[data-toggle="tooltip"]').tooltip()
    });

    /***************** lazyload ******************/

    $(function() {
        $("div.lazy,img.lazy").lazyload();
        effect: "fadeIn"
    });

    // /***************** isotope ******************/
    // $(function() {
    //     var $grid = $('.grid').isotope({
    //         itemSelector: '.grid-item',
    //         percentPosition: true,
    //         layoutMode: 'fitRows'
    //     });
    //     // layout Isotope after each image loads
    //     $grid.imagesLoaded().progress(function() {
    //         $grid.isotope('layout');
    //     });
    // });

    // /***************** masonry-isotope with filter ******************/
    // $(function() {
    //     var $win = $(window),
    //         $imgs = $("img"),
    //         $container = $('.masonry-grid').isotope(),
    //         filters = {};

    //     function loadVisible($els, trigger) {
    //         $els.filter(function() {
    //             var rect = this.getBoundingClientRect();
    //             return rect.top >= 0 && rect.top <= window.innerHeight;
    //         }).trigger(trigger);
    //     }

    //     $container.isotope('on', 'layoutComplete', function() {
    //         loadVisible($imgs, 'lazylazy');
    //     });

    //     $win.on('scroll', function() {
    //         loadVisible($imgs, 'lazylazy');
    //         $container.isotope('layout');
    //     });

    //     $container.imagesLoaded(function() {
    //         $imgs.load(function() {
    //             $container.isotope('layout');
    //         });
    //         $(window).trigger('resize');
    //     });

    //     $imgs.lazyload({
    //         effect: "fadeIn",
    //         failure_limit: Math.max($imgs.length - 1, 0),
    //         event: 'lazylazy'
    //     });
    //     // filter functions
    //     var filterFns = {
    //         // show if number is greater than 50
    //         numberGreaterThan50: function() {
    //             var number = $(this).find('.number').text();
    //             return parseInt(number, 10) > 50;
    //         },
    //         // show if name ends with -ium
    //         ium: function() {
    //             var name = $(this).find('.name').text();
    //             return name.match(/ium$/);
    //         }
    //     };

    //     // bind filter button click
    //     $('#filters').on('click', 'button', function() {
    //         var filterValue = $(this).attr('data-filter');
    //         // use filterFn if matches value
    //         filterValue = filterFns[filterValue] || filterValue;
    //         $container.isotope({ filter: filterValue });
    //     });

    //     // change is-checked class on buttons
    //     $('.button-group').each(function(i, buttonGroup) {
    //         var $buttonGroup = $(buttonGroup);
    //         $buttonGroup.on('click', 'button', function() {
    //             $buttonGroup.find('.is-checked').removeClass('is-checked');
    //             $(this).addClass('is-checked');
    //         });
    //     });


    //     // combination filters with dropdowns
    //         $('select').click(function(e) {
    //             e.preventDefault();
    //         });
    //       $('select').on('change', function (e) {
    //         $('html,body').animate({scrollTop:$("#casestudies").offset().top - 190}, 300);
    //         var $this = $(this);
            
    //         // store filter value in object
    //         // i.e. filters.color = 'red'
    //         var group = $this.attr('data-filter-group');
            
    //         filters[ group ] = $this.find(':selected').attr('data-filter-value');
    //         // console.log( $this.find(':selected') )
    //         // convert object into array
    //         var isoFilters = [];
    //         for ( var prop in filters ) {
    //           isoFilters.push( filters[ prop ] )
    //         }
    //         console.log(filters);
    //         var selector = isoFilters.join('');
    //         $container.isotope({ filter: selector });
    //         return false;

    //       });
    // });

    /***************** masonry-isotope ******************/

    function loadVisible($els, trigger) {
        $els.filter(function() {
            var rect = this.getBoundingClientRect();
            return rect.top >= 0 && rect.top <= window.innerHeight;
        }).trigger(trigger);
    }


    function loadMore(toShow, $container, iso) {
        $container.find(".hidden").removeClass("hidden");

        var hiddenElems = iso.filteredItems.slice(toShow, iso.filteredItems.length).map(function(item) {
            return item.element;
        });
        $(hiddenElems).addClass('hidden');
        $container.isotope('layout');

        //when no more to load, hide show more button
        if (hiddenElems.length == 0) {
            jQuery("#load-more").hide();
        } else {
            jQuery("#load-more").show();
        };

    }

    function isotopeInit($container) {

        var $win = $(window),
            $imgs = $("img"),
            filters = {};

        $container.isotope('on', 'layoutComplete', function() {
            loadVisible($imgs, 'lazylazy');
        });

        $win.load(function()  {
            loadVisible($imgs, 'lazylazy');
            $container.isotope('layout');
            //$('.cd-testimonials-wrapper').grid-item.resize();
        });

        $win.on('scroll', function() {
            loadVisible($imgs, 'lazylazy');
            //$container.isotope('layout');
            //$('.cd-testimonials-wrapper').grid-item.resize();
        });

        $container.imagesLoaded(function() {
            $imgs.load(function() {
                $container.isotope('layout');
            });
            $(window).trigger('resize');

        });

        $imgs.lazyload({
            effect: "fadeIn",
            failure_limit: Math.max($imgs.length - 1, 0),
            event: 'lazylazy'
        });


        // bind filter button click
        $('.filters').on('click', 'button', function() {
            var filterValue = $(this).attr('data-filter');
            $container.isotope({ filter: filterValue });
            loadVisible($imgs, 'lazylazy');
        });

        // change is-checked class on buttons
        $('.button-group').each(function(i, buttonGroup) {
            var $buttonGroup = $(buttonGroup);
            $buttonGroup.on('click', 'button', function() {
                $buttonGroup.find('.is-checked').removeClass('is-checked');
                $(this).addClass('is-checked');
            });
        });


        if ($container.selector == ".masonry-grid-list") {
            //console.log($container.selector);
            var initShow = 9; //number of items loaded on init & onclick load more button
            var counter = initShow; //counter for load more button
            var iso = $container.data('isotope'); // get Isotope instance

            loadMore(initShow, $container, iso); //execute function onload



            //append load more button
            $('.masonry-grid-list').isotope().after('<div class="text-center loadmore-wrapper"><button id="load-more" class="btn btn-info"> Show more</button></div>');

            //when load more button clicked
            $("#load-more").click(function() {
                if ($('.filters').data('clicked')) {
                    //when filter button clicked, set initial value for counter
                    counter = initShow;
                    $('.filters').data('clicked', false);
                } else {
                    counter = counter;
                };
                counter = counter + initShow;
                loadMore(counter, $container, iso);
            });


            // combination filters with dropdowns
            $('.select-fliter').click(function(e) {
                e.preventDefault();
            });

            $('.select-fliter').on('change', function(e) {
                $('html,body').animate({ scrollTop: $(".grid-sizer").offset().top - 200 }, 300);
                var $this = $(this);

                // store filter value in object
                // i.e. filters.color = 'red'
                var group = $this.attr('data-filter-group');

                filters[group] = $this.find(':selected').attr('data-filter-value');
                // console.log( $this.find(':selected') )
                // convert object into array
                var isoFilters = [];
                for (var prop in filters) {
                    isoFilters.push(filters[prop])
                }
                //console.log(filters);
                var selector = isoFilters.join('');
                $container.isotope({ filter: selector });
                return false;
                $(this).data('clicked', true);

                loadMore(initShow, $container, iso);
            });

            $('.select-fliter').on('change', function() {
                $(this).data('clicked', true);
                loadMore(initShow, $container, iso);
            });
        }
        if ($container.selector == ".masonry-grid-list2") {
            //console.log($container.selector);
            var initShow = 10; //number of items loaded on init & onclick load more button
            var counter = initShow; //counter for load more button
            var iso = $container.data('isotope'); // get Isotope instance

            loadMore(initShow, $container, iso); //execute function onload



            //append load more button
            $('.masonry-grid-list2').isotope().after('<div class="text-center loadmore-wrapper"><button id="load-more" class="btn btn-info hidden"> Show more</button></div>');

            //when load more button clicked
            $("#load-more").click(function() {
                if ($('.filters').data('clicked')) {
                    //when filter button clicked, set initial value for counter
                    counter = initShow;
                    $('.filters').data('clicked', false);
                } else {
                    counter = counter;
                };
                counter = counter + initShow;
                loadMore(counter, $container, iso);
            });

            $('.filters').on('click', 'button', function() {
                loadMore(initShow, $container, iso);
            });
        }

        if ($container.selector == ".masonry-grid-list3") {
            //console.log($container.selector);
            var initShow = 5; //number of items loaded on init & onclick load more button
            var counter = initShow; //counter for load more button
            var iso = $container.data('isotope'); // get Isotope instance

            loadMore(initShow, $container, iso); //execute function onload

            //append load more button
            $('.masonry-grid-list3').isotope().after('<div class="text-center loadmore-wrapper"><button id="load-more" class="btn btn-info hidden"> Show more</button></div>');

            //when load more button clicked
            $("#load-more").click(function() {
                if ($('.filters').data('clicked')) {
                    //when filter button clicked, set initial value for counter
                    counter = initShow;
                    $('.filters').data('clicked', false);
                } else {
                    counter = counter;
                };
                counter = counter + initShow;
                loadMore(counter, $container, iso);
            });

            $('.filters').on('click', 'button', function() {
                loadMore(initShow, $container, iso);
            });
        }
        if ($container.selector == ".masonry-grid-list4") {
            //console.log($container.selector);
            var initShow =10; //number of items loaded on init & onclick load more button
            var counter = initShow; //counter for load more button
            var iso = $container.data('isotope'); // get Isotope instance

           

            //append load more button
            $('.masonry-grid-list4').isotope().after('<div class="text-center loadmore-wrapper"><button id="load-more" class="btn btn-info"> Show more</button></div>');
		loadMore(initShow, $container, iso); //execute function onload
            //when load more button clicked
            $("#load-more").click(function() {
                if ($('.filters').data('clicked')) {
                    //when filter button clicked, set initial value for counter
                    counter = initShow;
                    $('.filters').data('clicked', false);
                } else {

                    counter = counter;
                };
                counter = counter + initShow;
                loadMore(counter, $container, iso);
            });

            $('.filters').on('click', 'button', function() {
                loadMore(initShow, $container, iso);
            });
            // combination filters with dropdowns
            $('.select-fliter').click(function(e) {
                e.preventDefault();
            });

            $('.select-fliter').on('change', function(e) {
                $('html,body').animate({ scrollTop: $(".grid-sizer").offset().top - 200 }, 300);
                var $this = $(this);

                // store filter value in object
                // i.e. filters.color = 'red'
                var group = $this.attr('data-filter-group');

                filters[group] = $this.find(':selected').attr('data-filter-value');
                // console.log( $this.find(':selected') )
                // convert object into array
                var isoFilters = [];
                for (var prop in filters) {
                    isoFilters.push(filters[prop])
                }
                //console.log(filters);
                var selector = isoFilters.join('');
                $container.isotope({ filter: selector });
                return false;
                $(this).data('clicked', true);

                loadMore(initShow, $container, iso);
            });

            $('.select-fliter').on('change', function() {
                $(this).data('clicked', true);
                loadMore(initShow, $container, iso);
            });

        }


    }


    $(function() {

        var $container = $('.masonry-grid-list').isotope({
            itemSelector: '.grid-item',
            percentPosition: true,
            masonry: {
                columnWidth: '.grid-sizer',
                // gutter: '.gutter-sizer'
            },
            //stamp: '.stamp',
        });
        if ($('.masonry-grid-list').length > 0) {
            isotopeInit($container);
        }


        var $container = $('.masonry-grid-list2').isotope({
            itemSelector: '.res',
            percentPosition: true,
            masonry: {
            },

        });
        if ($('.masonry-grid-list2').length > 0) {
            isotopeInit($container);
        }


        var $container = $('.masonry-grid-list3').isotope({
            itemSelector: '.res',
            percentPosition: true,
            masonry: {
            },

        });
        if ($('.masonry-grid-list3').length > 0) {
            isotopeInit($container);
        }


        var $container = $('.masonry-grid-list4').isotope({
            itemSelector: '.res',
            percentPosition: true,
            //filter: '.blog',
            masonry: {

                //columnWidth: '.grid-item.res'
            },
        });
        if ($('.masonry-grid-list4').length > 0) {
            isotopeInit($container);
        }


        var $container2 = $('.masonry-grid').isotope({
            itemSelector: '.res',
            percentPosition: true,
            //filter: '.featured',
            masonry: {

                //columnWidth: '.grid-item.res'
            },
        });
        if ($('.masonry-grid').length > 0) {
            isotopeInit($container2);
        }
        //isotopeInit($container2);

    });

    /***************** pageloader ******************/
    $( window ).load(function() {
        /*  [ Page loader ]
        - - - - - - - - - - - - - - - - - - - - */
        $( 'body' ).addClass( 'loaded' );
        setTimeout(function () {
            $('#pageloader').fadeOut();
        }, 2000);
    });


    /***************** smoothscroll ******************/
    smoothScroll.init({
        selector: '[data-scroll]', // Selector for links (must be a valid CSS selector)
        //selectorHeader: '[main-header-wrapper]', // Selector for fixed headers (must be a valid CSS selector)
        speed: 500, // Integer. How fast to complete the scroll in milliseconds
        easing: 'easeInOutCubic', // Easing pattern to use
        offset: 120, // Integer. How far to offset the scrolling anchor location in pixels
        updateURL: false, // Boolean. If true, update the URL hash on scroll
        callback: function(anchor, toggle) {} // Function to run after scrolling
    });

    /***************** matchheight ******************/
    $(function() {
        $('.matchheight').matchHeight();
    });


    /***************** slick-slider with tab ******************/
    // var $nav_list = $( '.tabs' ),
    // $nav_tab = $nav_list.children( '.tab' ),
    // $back_tab = $( '.tab-back' ),
    // $more_tab = $( '.tab-more' ),
    // $sections = $( '.slides' ),
    // tab_list_length = $nav_tab.length,
    // tab_width = $nav_tab.eq(0).outerWidth(),
    // list_width = $nav_list.innerWidth(),
    // tabs_displayed = parseInt(( list_width / tab_width ), 10),
    // pos_counter = 0;

    // // configure the slider
    // $sections.slick({
    //     arrows: false,
    //     dots: false,
    //     slidesToShow: 1,
    //     slidesToScroll: 1,
    //     autoplay: false,
    //     pauseOnHover: false,
    //     speed: 300,
    //     infinite: false,
    // });

    // $sections.on('afterChange', function(currentSlide){
    //     var index = $sections.slick('slickCurrentSlide');
    //     $nav_tab.removeClass( 'active' );
    //     $nav_tab.eq(index).addClass( 'active' );
    // });

    // //clicking on a nav_tab gives it the active class, slides slider to the corresponding section
    // $nav_tab.click( function() {
    //     $nav_tab.removeClass( 'active' );
    //     $(this).addClass( 'active' );
    //     var index = $(this).index();
    //     //$sections.slickGoTo( parseInt(index) );
    //     $sections.slick('slickGoTo', parseInt(index) );
    // });


    /***************** multistep form ******************/
    //jQuery time
    var current_fs, next_fs, previous_fs; //fieldsets
    var left, opacity, scale; //fieldset properties which we will animate
    var animating; //flag to prevent quick multi-click glitches

    $(".next").click(function(){
        if(animating) return false;
        animating = true;
        
        current_fs = $(this).parent();
        next_fs = $(this).parent().next();
        
        //activate next step on progressbar using the index of next_fs
        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
        
        //show the next fieldset
        next_fs.show(); 
        //hide the current fieldset with style
        current_fs.animate({opacity: 0}, {
            step: function(now, mx) {
                //as the opacity of current_fs reduces to 0 - stored in "now"
                //1. scale current_fs down to 80%
                scale = 1 - (1 - now) * 0.2;
                //2. bring next_fs from the right(50%)
                left = (now * 50)+"%";
                //3. increase opacity of next_fs to 1 as it moves in
                opacity = 1 - now;
                current_fs.css({
            'transform': 'scale('+scale+')',
            'position': 'absolute'
          });
                next_fs.css({'left': left, 'opacity': opacity});
            }, 
            duration: 800, 
            complete: function(){
                current_fs.hide();
                animating = false;
            }, 
            //this comes from the custom easing plugin
            easing: 'easeInOutBack'
        });
    });

    $(".previous").click(function(){
        if(animating) return false;
        animating = true;
        
        current_fs = $(this).parent();
        previous_fs = $(this).parent().prev();
        
        //de-activate current step on progressbar
        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
        
        //show the previous fieldset
        previous_fs.show(); 
        //hide the current fieldset with style
        current_fs.animate({opacity: 0}, {
            step: function(now, mx) {
                //as the opacity of current_fs reduces to 0 - stored in "now"
                //1. scale previous_fs from 80% to 100%
                scale = 0.8 + (1 - now) * 0.2;
                //2. take current_fs to the right(50%) - from 0%
                left = ((1-now) * 50)+"%";
                //3. increase opacity of previous_fs to 1 as it moves in
                opacity = 1 - now;
                current_fs.css({'left': left});
                previous_fs.css({'transform': 'scale('+scale+')', 'opacity': opacity});
            }, 
            duration: 800, 
            complete: function(){
                current_fs.hide();
                animating = false;
            }, 
            //this comes from the custom easing plugin
            easing: 'easeInOutBack'
        });
    });

    $(".submit").click(function(){
        return false;
    })



    /***************** autofix header ******************/
    $(function() {
        $(document).ready(function() {
            // media query event handler
            if (matchMedia) {
              var mq = window.matchMedia("(min-width: 1200px)");
              mq.addListener(WidthChange);
              WidthChange(mq);
            }

            // media query change
            function WidthChange(mq) {
              if (mq.matches) {
                $(".autofix_header1").stick_in_parent({
                    parent: '.sub-page-wrapper',
                    offset_top: 130
                });
                $(".autofix_header2").stick_in_parent({
                    offset_top: 116
                });
              } else {
                $(".autofix_header1").trigger("sticky_kit:detach");
                $(".autofix_header2").trigger("sticky_kit:detach");
              }

            }

            
            
            $(".autofix_header3").stick_in_parent({
                offset_top: 55
            });
            $(".autofix_header4").stick_in_parent({
                offset_top: 55
            });
            $(".autofix_header5").stick_in_parent({
                offset_top: 55
            });
        });
    });

    /***************** back to top ******************/
    jQuery(document).ready(function($){
        // browser window scroll (in pixels) after which the "back to top" link is shown
        var offset = 300,
            //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
            offset_opacity = 1200,
            //duration of the top scrolling animation (in ms)
            scroll_top_duration = 700,
            //grab the "back to top" link
            $back_to_top = $('.cd-top');

        //hide or show the "back to top" link
        $(window).scroll(function(){
            ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
            if( $(this).scrollTop() > offset_opacity ) { 
                $back_to_top.addClass('cd-fade-out');
            }
        });

        //smooth scroll to top
        $back_to_top.on('click', function(event){
            event.preventDefault();
            $('body,html').animate({
                scrollTop: 0 ,
                }, scroll_top_duration
            );
        });

    });

    /***************** addthis hide ******************/
    $(function() {

         if ($(window).height() < $(document).height()) {
                $('.addthis-smartlayers-mobile').show();
             }

             $(window).scroll(function() {

                // if ($(window).scrollTop() >= 15) {
                //     $('div.shadow-top').show();
                // } else {
                //     $('div.shadow-top').hide();
                // }
                if ($(window).scrollTop() + $(window).height() >= $(document).height() - 1000) {
                    $('.addthis-smartlayers-mobile').hide();
                } else {
                    $('.addthis-smartlayers-mobile').show();
                }

             });
    });



});
